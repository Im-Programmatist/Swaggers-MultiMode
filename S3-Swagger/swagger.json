{
	"swagger": "2.0",
	"info": {
		"description": "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.",
		"version": "1.0.6",
		"title": "Swagger Petstore",
		"termsOfService": "http://swagger.io/terms/",
		"contact": {
			"email": "apiteam@swagger.io"
		},
		"license": {
			"name": "Apache 2.0",
			"url": "http://www.apache.org/licenses/LICENSE-2.0.html"
		}
	},
	"schemes": ["http", "https"],
	"paths": {
		"/pet": {
			"post": {
				"tags": ["pet"],
				"summary": "Add a new pet to the store",
				"description": "",
				"operationId": "addPet",
				"consumes": ["application/json", "application/xml"],
				"produces": ["application/json", "application/xml"],
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "Pet object that needs to be added to the store",
					"required": true,
					"schema": {
						"$ref": "#/definitions/Pet"
					}
				}],
				"responses": {
					"405": {
						"description": "Invalid input"
					}
				},
				"security": [{
					"petstore_auth": ["write:pets", "read:pets"]
				}]
			},
			"put": {
				"tags": ["pet"],
				"summary": "Update an existing pet",
				"description": "",
				"operationId": "updatePet",
				"consumes": ["application/json", "application/xml"],
				"produces": ["application/json", "application/xml"],
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "Pet object that needs to be added to the store",
					"required": true,
					"schema": {
						"$ref": "#/definitions/Pet"
					}
				}],
				"responses": {
					"400": {
						"description": "Invalid ID supplied"
					},
					"404": {
						"description": "Pet not found"
					},
					"405": {
						"description": "Validation exception"
					}
				},
				"security": [{
					"petstore_auth": ["write:pets", "read:pets"]
				}]
			}
		},
		"/pet/{petId}": {
			"get": {
				"tags": ["pet"],
				"summary": "Find pet by ID",
				"description": "Returns a single pet",
				"operationId": "getPetById",
				"produces": ["application/json", "application/xml"],
				"parameters": [{
					"name": "petId",
					"in": "path",
					"description": "ID of pet to return",
					"required": true,
					"type": "integer",
					"format": "int64"
				}],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"$ref": "#/definitions/Pet"
						}
					},
					"400": {
						"description": "Invalid ID supplied"
					},
					"404": {
						"description": "Pet not found"
					}
				},
				"security": [{
					"api_key": []
				}]
			},
			"post": {
				"tags": ["pet"],
				"summary": "Updates a pet in the store with form data",
				"description": "",
				"operationId": "updatePetWithForm",
				"consumes": ["application/x-www-form-urlencoded"],
				"produces": ["application/json", "application/xml"],
				"parameters": [{
					"name": "petId",
					"in": "path",
					"description": "ID of pet that needs to be updated",
					"required": true,
					"type": "integer",
					"format": "int64"
				}, {
					"name": "name",
					"in": "formData",
					"description": "Updated name of the pet",
					"required": false,
					"type": "string"
				}, {
					"name": "status",
					"in": "formData",
					"description": "Updated status of the pet",
					"required": false,
					"type": "string"
				}],
				"responses": {
					"405": {
						"description": "Invalid input"
					}
				},
				"security": [{
					"petstore_auth": ["write:pets", "read:pets"]
				}]
			},
			"delete": {
				"tags": ["pet"],
				"summary": "Deletes a pet",
				"description": "",
				"operationId": "deletePet",
				"produces": ["application/json", "application/xml"],
				"parameters": [{
					"name": "api_key",
					"in": "header",
					"required": false,
					"type": "string"
				}, {
					"name": "petId",
					"in": "path",
					"description": "Pet id to delete",
					"required": true,
					"type": "integer",
					"format": "int64"
				}],
				"responses": {
					"400": {
						"description": "Invalid ID supplied"
					},
					"404": {
						"description": "Pet not found"
					}
				},
				"security": [{
					"petstore_auth": ["write:pets", "read:pets"]
				}]
			}
		},		
        "/api/": {
            "get": {
                "tags": [
                    "Local API"
                ],
                "summary": "This is start express api",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#definitions/appResponse"
                        }
                    },
                    "default": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#definitions/errorResponse"
                        }
                    }
                }
            }
        },
        "/api/test": {
            "get": {
                "tags": [
                    "Local API"
                ],
                "summary": "This is test express api",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#definitions/appResponse"
                        }
                    },
                    "default": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#definitions/errorResponse"
                        }
                    }
                }
            }
        },
        "/api/optimise-pay": {
            "post": {
                "tags": [
                    "Local API"
                ],
                "summary": "Dealcalc Module data",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#definitions/optimisePay"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#definitions/appResponse"
                        }
                    },
                    "default": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#definitions/errorResponse"
                        }
                    }
                }
            }
        },
        "/users/{userId}": {
            "get": {
                "tags": [
                    "User API"
                ],
                "summary": "Get a user by ID",
                "parameters": "...",
                "responses": {
                    "200": {
                        "description": "A single user.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/definitions/schemas/User"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/definitions/responses/NotFound"
                    }
                }
            }
        },
        "/users": {
            "get": {
                "tags": [
                    "User API"
                ],
                "summary": "Get all users",
                "responses": {
                    "200": {
                        "description": "A list of users.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/schemas/User"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
	},
	"securityDefinitions": {
		"api_key": {
			"type": "apiKey",
			"name": "api_key",
			"in": "header"
		},
		"petstore_auth": {
			"type": "oauth2",
			"authorizationUrl": "https://petstore.swagger.io/oauth/authorize",
			"flow": "implicit",
			"scopes": {
				"read:pets": "read your pets",
				"write:pets": "modify pets in your account"
			}
		}
	},
	"definitions": {
        "appResponse": {
            "$ref": "./appResponse.json#/appResponse"
        },
        "errorResponse": {
            "$ref": "./errorResponse.json#/errorResponse"
        },
        "optimisePay": {
            "$ref": "./optimisePay.json#/optimisePay"
        },
        "schemas": {
            "User": {
                "$ref": "./users.json#/User"
            }
        },
        "responses": {
            "$ref": "./responses.yaml"
        },
		"Category": {
			"type": "object",
			"properties": {
				"id": {
					"type": "integer",
					"format": "int64"
				},
				"name": {
					"type": "string"
				}
			},
			"xml": {
				"name": "Category"
			}
		},
		"Pet": {
			"type": "object",
			"required": ["name", "photoUrls"],
			"properties": {
				"id": {
					"type": "integer",
					"format": "int64"
				},
				"category": {
					"$ref": "#/definitions/Category"
				},
				"name": {
					"type": "string",
					"example": "doggie"
				},
				"photoUrls": {
					"type": "array",
					"xml": {
						"wrapped": true
					},
					"items": {
						"type": "string",
						"xml": {
							"name": "photoUrl"
						}
					}
				},
				"tags": {
					"type": "array",
					"xml": {
						"wrapped": true
					},
					"items": {
						"xml": {
							"name": "tag"
						},
						"$ref": "#/definitions/Tag"
					}
				},
				"status": {
					"type": "string",
					"description": "pet status in the store",
					"enum": ["available", "pending", "sold"]
				}
			},
			"xml": {
				"name": "Pet"
			}
		},
		"Tag": {
			"type": "object",
			"properties": {
				"id": {
					"type": "integer",
					"format": "int64"
				},
				"name": {
					"type": "string"
				}
			},
			"xml": {
				"name": "Tag"
			}
		}
	},
	"externalDocs": {
		"description": "Find out more about Swagger",
		"url": "http://swagger.io"
	}
}